Thank you for sharing the details. It looks like you're trying to upload a PDF file to an external API (Gemini) and get a response based on a prompt. You're using Spring Boot with IntelliJ, but your HomeController.java has several syntax issues, annotation errors, and is not properly structured.

I'll guide you step-by-step and then give you a corrected version of your HomeController.java.


---

‚úÖ What You're Trying to Do:

1. Serve a home page (index.html).


2. Accept a file upload (POST /upload).


3. Send this file with a POST request to a Gemini API (with a prompt in the URL).


4. Return the extracted result.




---

‚ùå Problems in Your Code:

Syntax issues: Controller annotation not correct.

Incorrect use of constructor and RestTemplate.

Improper @Value annotation (typo: $(spring.application.name) should be ${...}).

Wrong or missing return types.

Missing class and method braces.

Wrong imports like import org.springframework.web.bind.annotation.".



---

‚úÖ Corrected HomeController.java

package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.io.File;

@Controller
public class HomeController {

    @Value("${spring.application.name}")
    private String appName;

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("appName", appName);
        return "index"; // index.html must be placed in src/main/resources/templates
    }

    @PostMapping("/upload")
    @ResponseBody
    public String uploadAndSendFile() {
        System.out.println("App Name: " + appName);

        String filePath = "C:\\Users\\bupuvar\\Downloads\\AI Docs.pdf";
        String url = "http://ingestion.api.dbtextract-eu.uat.gcp.db.com/docuquery" +
                     "?service=Gemini&subservice=Gemini-askQuery&poseSingleQuery=false" +
                     "&model=GEMINI_2_0_FLASH_001&tenantID=u3xn_uat" +
                     "&prompt=extract document date";

        File file = new File(filePath);
        if (!file.exists()) {
            return "File not found: " + filePath;
        }

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", new FileSystemResource(file));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    requestEntity,
                    String.class
            );

            return response.getBody();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        }
    }
}


---

‚úÖ What You Need in application.properties:

spring.application.name=SpringGeminiUploader


---

üìÅ Where to Put index.html:

Place it in:

src/main/resources/templates/index.html

And use Thymeleaf or static HTML based on your Spring setup.


---

üöÄ To Run:

1. Start your Spring Boot app.


2. Open browser ‚Üí http://localhost:8080/.


3. If you want to test the upload, either:

Call /upload from browser or Postman.

Or integrate it with a front-end form (I can help with this too).





---

Would you like a simple frontend HTML form to upload a file instead of hardcoding the file path in Java?

Thank you for sharing the details. It looks like you're trying to upload a PDF file to an external API (Gemini) and get a response based on a prompt. You're using Spring Boot with IntelliJ, but your HomeController.java has several syntax issues, annotation errors, and is not properly structured.

I'll guide you step-by-step and then give you a corrected version of your HomeController.java.


---

‚úÖ What You're Trying to Do:

1. Serve a home page (index.html).


2. Accept a file upload (POST /upload).


3. Send this file with a POST request to a Gemini API (with a prompt in the URL).


4. Return the extracted result.




---

‚ùå Problems in Your Code:

Syntax issues: Controller annotation not correct.

Incorrect use of constructor and RestTemplate.

Improper @Value annotation (typo: $(spring.application.name) should be ${...}).

Wrong or missing return types.

Missing class and method braces.

Wrong imports like import org.springframework.web.bind.annotation.".



---

‚úÖ Corrected HomeController.java

package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.io.File;

@Controller
public class HomeController {

    @Value("${spring.application.name}")
    private String appName;

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("appName", appName);
        return "index"; // index.html must be placed in src/main/resources/templates
    }

    @PostMapping("/upload")
    @ResponseBody
    public String uploadAndSendFile() {
        System.out.println("App Name: " + appName);

        String filePath = "C:\\Users\\bupuvar\\Downloads\\AI Docs.pdf";
        String url = "http://ingestion.api.dbtextract-eu.uat.gcp.db.com/docuquery" +
                     "?service=Gemini&subservice=Gemini-askQuery&poseSingleQuery=false" +
                     "&model=GEMINI_2_0_FLASH_001&tenantID=u3xn_uat" +
                     "&prompt=extract document date";

        File file = new File(filePath);
        if (!file.exists()) {
            return "File not found: " + filePath;
        }

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", new FileSystemResource(file));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    requestEntity,
                    String.class
            );

            return response.getBody();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        }
    }
}


---

‚úÖ What You Need in application.properties:

spring.application.name=SpringGeminiUploader


---

üìÅ Where to Put index.html:

Place it in:

src/main/resources/templates/index.html

And use Thymeleaf or static HTML based on your Spring setup.


---

üöÄ To Run:

1. Start your Spring Boot app.


2. Open browser ‚Üí http://localhost:8080/.


3. If you want to test the upload, either:

Call /upload from browser or Postman.

Or integrate it with a front-end form (I can help with this too).





---

Would you like a simple frontend HTML form to upload a file instead of hardcoding the file path in Java?

Thank you for sharing the details. It looks like you're trying to upload a PDF file to an external API (Gemini) and get a response based on a prompt. You're using Spring Boot with IntelliJ, but your HomeController.java has several syntax issues, annotation errors, and is not properly structured.

I'll guide you step-by-step and then give you a corrected version of your HomeController.java.


---

‚úÖ What You're Trying to Do:

1. Serve a home page (index.html).


2. Accept a file upload (POST /upload).


3. Send this file with a POST request to a Gemini API (with a prompt in the URL).


4. Return the extracted result.




---

‚ùå Problems in Your Code:

Syntax issues: Controller annotation not correct.

Incorrect use of constructor and RestTemplate.

Improper @Value annotation (typo: $(spring.application.name) should be ${...}).

Wrong or missing return types.

Missing class and method braces.

Wrong imports like import org.springframework.web.bind.annotation.".



---

‚úÖ Corrected HomeController.java

package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.io.File;

@Controller
public class HomeController {

    @Value("${spring.application.name}")
    private String appName;

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("appName", appName);
        return "index"; // index.html must be placed in src/main/resources/templates
    }

    @PostMapping("/upload")
    @ResponseBody
    public String uploadAndSendFile() {
        System.out.println("App Name: " + appName);

        String filePath = "C:\\Users\\bupuvar\\Downloads\\AI Docs.pdf";
        String url = "http://ingestion.api.dbtextract-eu.uat.gcp.db.com/docuquery" +
                     "?service=Gemini&subservice=Gemini-askQuery&poseSingleQuery=false" +
                     "&model=GEMINI_2_0_FLASH_001&tenantID=u3xn_uat" +
                     "&prompt=extract document date";

        File file = new File(filePath);
        if (!file.exists()) {
            return "File not found: " + filePath;
        }

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", new FileSystemResource(file));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    requestEntity,
                    String.class
            );

            return response.getBody();
        } catch (Exception e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        }
    }
}


---

‚úÖ What You Need in application.properties:

spring.application.name=SpringGeminiUploader


---

üìÅ Where to Put index.html:

Place it in:

src/main/resources/templates/index.html

And use Thymeleaf or static HTML based on your Spring setup.


---

üöÄ To Run:

1. Start your Spring Boot app.


2. Open browser ‚Üí http://localhost:8080/.


3. If you want to test the upload, either:

Call /upload from browser or Postman.

Or integrate it with a front-end form (I can help with this too).





---

Would you like a simple frontend HTML form to upload a file instead of hardcoding the file path in Java?

Absolutely! Let's **teach you Spring Boot + REST API** from **scratch**, using a **simple, real-world mini project**, and include **Postman testing**.

This will give you confidence and show your mentor that you're learning!

---

## üß† What You‚Äôll Build

A **Book Management API** ‚Äî You can:

* Add a book (`POST`)
* Get all books (`GET`)
* Get a book by ID (`GET`)
* Delete a book (`DELETE`)

---

## ‚úÖ Step-by-Step Guide (With Code)

---

### üîß 1. Create Spring Boot Project

Go to: [https://start.spring.io/](https://start.spring.io/)

Choose:

* **Project**: Maven
* **Language**: Java
* **Spring Boot**: latest
* **Project Name**: `book-api`
* **Dependencies**:

  * Spring Web
  * Spring Boot DevTools
  * Spring Data JPA
  * H2 Database (in-memory DB for testing)

Click **Generate**, unzip it, and open in **IntelliJ IDEA**.

---

### üìÅ 2. Project Structure

```
src/
‚îî‚îÄ‚îÄ main/
    ‚îú‚îÄ‚îÄ java/
    ‚îÇ   ‚îî‚îÄ‚îÄ com.example.bookapi/
    ‚îÇ       ‚îú‚îÄ‚îÄ controller/
    ‚îÇ       ‚îú‚îÄ‚îÄ model/
    ‚îÇ       ‚îú‚îÄ‚îÄ repository/
    ‚îÇ       ‚îî‚îÄ‚îÄ BookApiApplication.java
    ‚îî‚îÄ‚îÄ resources/
        ‚îî‚îÄ‚îÄ application.properties
```

---

### üì¶ 3. Define Book Model

üìÑ `model/Book.java`

```java
package com.example.bookapi.model;

import jakarta.persistence.*;

@Entity
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getAuthor() { return author; }
    public void setAuthor(String author) { this.author = author; }
}
```

---

### üì¶ 4. Create Repository

üìÑ `repository/BookRepository.java`

```java
package com.example.bookapi.repository;

import com.example.bookapi.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}
```

---

### üì¶ 5. Create Controller

üìÑ `controller/BookController.java`

```java
package com.example.bookapi.controller;

import com.example.bookapi.model.Book;
import com.example.bookapi.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/books")
@CrossOrigin(origins = "*")
public class BookController {

    @Autowired
    private BookRepository bookRepo;

    @PostMapping
    public Book createBook(@RequestBody Book book) {
        return bookRepo.save(book);
    }

    @GetMapping
    public List<Book> getAllBooks() {
        return bookRepo.findAll();
    }

    @GetMapping("/{id}")
    public Optional<Book> getBookById(@PathVariable Long id) {
        return bookRepo.findById(id);
    }

    @DeleteMapping("/{id}")
    public String deleteBook(@PathVariable Long id) {
        bookRepo.deleteById(id);
        return "Book deleted!";
    }
}
```

---

### ‚öôÔ∏è 6. Configure H2 DB

üìÑ `application.properties`

```properties
spring.datasource.url=jdbc:h2:mem:bookdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
```

---

### ‚ñ∂Ô∏è 7. Run Project

Right-click on `BookApiApplication.java` ‚Üí **Run**.

Visit: [http://localhost:8080/h2-console](http://localhost:8080/h2-console)

* JDBC URL: `jdbc:h2:mem:bookdb`
* Username: `sa`
* Password: *(blank)*

Click **Connect** ‚Üí You‚Äôll see the Book table after a book is added.

---

### üß™ 8. Test in Postman

Open **Postman**, and test these:

---

#### üî∏ Add Book ‚Äì `POST`

* **URL**: `http://localhost:8080/api/books`
* **Method**: POST
* **Body** ‚Üí Raw ‚Üí JSON:

```json
{
  "title": "Harry Potter",
  "author": "J.K. Rowling"
}
```

---

#### üî∏ Get All Books ‚Äì `GET`

* **URL**: `http://localhost:8080/api/books`
* **Method**: GET

---

#### üî∏ Get by ID ‚Äì `GET`

* **URL**: `http://localhost:8080/api/books/1`

---

#### üî∏ Delete Book ‚Äì `DELETE`

* **URL**: `http://localhost:8080/api/books/1`

---

## üåü You Just Built a Complete API!

### What You Learned:

‚úÖ Create Spring Boot Project
‚úÖ Use MVC Structure: Model, Controller, Repository
‚úÖ Use in-memory H2 DB
‚úÖ Test with Postman
‚úÖ Understand JSON input/output

---

## ‚è≠Ô∏è What Next?

After this:

* You'll be ready to **apply the same REST structure** to your Gemini project.
* In the Gemini project, instead of `Book`, your model is: `PDF file + Prompt`
* Instead of DB, you call Gemini API.

Want me to guide you through that *once you complete this*?




Perfect! Let‚Äôs walk you through a **complete basic Spring Boot CRUD project**.

You‚Äôll build a simple **Student Management API** that lets you:

* **Create** a student
* **Read** students (all + by ID)
* **Update** student info
* **Delete** a student

This is the kind of mini-project you can show in interviews, Postman, and GitHub to prove you're learning Spring Boot well.

---

## üîß 1. Project Setup

Go to [https://start.spring.io](https://start.spring.io):

* **Project:** Maven
* **Language:** Java
* **Spring Boot Version:** Latest
* **Group:** `com.example`
* **Artifact:** `student-crud`
* **Dependencies:**

  * Spring Web
  * Spring Data JPA
  * H2 Database
  * Spring Boot DevTools (optional, for auto-reload)

Click **Generate**, unzip, and open in **IntelliJ IDEA**.

---

## üìÅ 2. Project Folder Structure

```
src/main/java/com/example/studentcrud/
‚îú‚îÄ‚îÄ controller/
‚îÇ   ‚îî‚îÄ‚îÄ StudentController.java
‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îî‚îÄ‚îÄ Student.java
‚îú‚îÄ‚îÄ repository/
‚îÇ   ‚îî‚îÄ‚îÄ StudentRepository.java
‚îú‚îÄ‚îÄ StudentCrudApplication.java
```

---

## üíæ 3. application.properties

üìÑ `src/main/resources/application.properties`

```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
```

This allows you to open the in-memory H2 database at:
üìå [http://localhost:8080/h2-console](http://localhost:8080/h2-console)
‚Üí JDBC URL: `jdbc:h2:mem:testdb`

---

## üì¶ 4. Model: Student.java

üìÑ `model/Student.java`

```java
package com.example.studentcrud.model;

import jakarta.persistence.*;

@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
```

---

## üì¶ 5. Repository: StudentRepository.java

üìÑ `repository/StudentRepository.java`

```java
package com.example.studentcrud.repository;

import com.example.studentcrud.model.Student;
import org.springframework.data.jpa.repository.JpaRepository;

public interface StudentRepository extends JpaRepository<Student, Long> {
}
```

---

## üì¶ 6. Controller: StudentController.java

üìÑ `controller/StudentController.java`

```java
package com.example.studentcrud.controller;

import com.example.studentcrud.model.Student;
import com.example.studentcrud.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/students")
@CrossOrigin(origins = "*") // allow frontend to access
public class StudentController {

    @Autowired
    private StudentRepository studentRepo;

    // CREATE
    @PostMapping
    public Student createStudent(@RequestBody Student student) {
        return studentRepo.save(student);
    }

    // READ ALL
    @GetMapping
    public List<Student> getAllStudents() {
        return studentRepo.findAll();
    }

    // READ BY ID
    @GetMapping("/{id}")
    public Optional<Student> getStudentById(@PathVariable Long id) {
        return studentRepo.findById(id);
    }

    // UPDATE
    @PutMapping("/{id}")
    public Student updateStudent(@PathVariable Long id, @RequestBody Student updatedStudent) {
        return studentRepo.findById(id).map(student -> {
            student.setName(updatedStudent.getName());
            student.setEmail(updatedStudent.getEmail());
            return studentRepo.save(student);
        }).orElse(null);
    }

    // DELETE
    @DeleteMapping("/{id}")
    public String deleteStudent(@PathVariable Long id) {
        studentRepo.deleteById(id);
        return "Student deleted!";
    }
}
```

---

## ‚ñ∂Ô∏è 7. Run Your Application

Run `StudentCrudApplication.java` (main class).

Your API will be hosted at:
üìå `http://localhost:8080/api/students`

---

## üì¨ 8. Test in Postman

### üî∏ Add Student ‚Äì `POST`

* **URL**: `http://localhost:8080/api/students`
* **Body** (JSON):

```json
{
  "name": "Alice",
  "email": "alice@example.com"
}
```

---

### üî∏ Get All ‚Äì `GET`

`http://localhost:8080/api/students`

---

### üî∏ Get One ‚Äì `GET`

`http://localhost:8080/api/students/1`

---

### üî∏ Update ‚Äì `PUT`

`http://localhost:8080/api/students/1`

```json
{
  "name": "Alice Updated",
  "email": "alice123@example.com"
}
```

---

### üî∏ Delete ‚Äì `DELETE`

`http://localhost:8080/api/students/1`

---

## ‚úÖ Summary of What You‚Äôve Built

* ‚úîÔ∏è Spring Boot REST API
* ‚úîÔ∏è CRUD operations
* ‚úîÔ∏è In-memory database
* ‚úîÔ∏è Postman testable
* ‚úîÔ∏è Organized structure

---

### üîÅ Want Me to Zip This as a Shareable Project?

I can also:

* Help you convert this into a **GitHub repo**
* Show how to turn this into a **frontend + backend** full-stack app later

Let me know if you'd like:

* A ZIP folder version
* Gemini version next
* Or frontend integration of this API

You‚Äôve got this üöÄ
